import Game from '../models/Game.js';
import User from '../models/User.js';

// –°–∏–º–≤–æ–ª—ã –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞
const symbols = ['üçí', 'üçã', 'üçä', 'üçá', 'üîî', '‚≠ê', 'üíé'];

// –≠–º—É–ª–∏—Ä—É–µ–º –∫—Ä—É—á–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–≤
const spinSlots = () => {
  return [
    symbols[Math.floor(Math.random() * symbols.length)], // –ë–∞—Ä–∞–±–∞–Ω 1
    symbols[Math.floor(Math.random() * symbols.length)], // –ë–∞—Ä–∞–±–∞–Ω 2
    symbols[Math.floor(Math.random() * symbols.length)], // –ë–∞—Ä–∞–±–∞–Ω 3
  ];
};

// –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–Ω–æ–∂–∏—Ç–µ–ª—è –≤—ã–∏–≥—Ä—ã—à–∞
const getMultiplier = (slots) => {
  // –ï—Å–ª–∏ –≤—Å–µ —Ç—Ä–∏ —Å–∏–º–≤–æ–ª–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã
  if (slots[0] === slots[1] && slots[1] === slots[2]) {
    return 3; // –ú–Ω–æ–∂–∏—Ç–µ–ª—å 3x –¥–ª—è –≤—Å–µ—Ö –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
  }
  // –ï—Å–ª–∏ –¥–≤–∞ —Å–∏–º–≤–æ–ª–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã
  if (slots[0] === slots[1] || slots[1] === slots[2] || slots[0] === slots[2]) {
    return 2; // –ú–Ω–æ–∂–∏—Ç–µ–ª—å 2x –¥–ª—è –¥–≤—É—Ö –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
  }
  return 0; // –ù–µ—Ç –≤—ã–∏–≥—Ä—ã—à–∞
};

// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∏–≥—Ä—ã –≤ —Å–ª–æ—Ç—ã
export const playSlots = async (req, res) => {
  const { betAmount } = req.body;
  const userId = req.user.id;

  try {
    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.findById(userId);
    if (!user || user.balance < betAmount) {
      return res.status(400).json({ message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∏–≥—Ä—ã' });
    }

    // –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã: –∫—Ä—É—á–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–≤
    const slots = spinSlots();

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–ø–∞–≤—à–µ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
    const multiplier = getMultiplier(slots);
    const winAmount = betAmount * multiplier; // –í—ã–∏–≥—Ä—ã—à —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ –º–Ω–æ–∂–∏—Ç–µ–ª—é

    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user.balance = user.balance - betAmount + winAmount;
    await user.save();

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã
    await Game.create({
      user: userId,
      betAmount,
      outcome: multiplier > 0 ? 'win' : 'lose', // –ò—Å—Ö–æ–¥ –∏–≥—Ä—ã (–ø–æ–±–µ–¥–∞ –∏–ª–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ)
      winAmount,
      gameType: 'slots',  // –¢–∏–ø –∏–≥—Ä—ã
      result: slots.join(' | '), // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—ã–ø–∞–≤—à—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
    });

    // –û—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏–≥—Ä—ã
    res.json({
      message: multiplier > 0 ? `–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${winAmount}!` : '–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!',
      slots,
      winAmount,
      newBalance: user.balance,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ' });
  }
};